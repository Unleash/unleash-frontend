/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.14.0-beta.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClientApplicationSchema,
  ClientFeaturesSchema,
  ClientMetricsSchema,
} from '../models';
import {
    ClientApplicationSchemaFromJSON,
    ClientApplicationSchemaToJSON,
    ClientFeaturesSchemaFromJSON,
    ClientFeaturesSchemaToJSON,
    ClientMetricsSchemaFromJSON,
    ClientMetricsSchemaToJSON,
} from '../models';

export interface GetClientFeatureRequest {
    featureName: string;
}

export interface RegisterClientApplicationRequest {
    clientApplicationSchema: ClientApplicationSchema;
}

export interface RegisterClientMetricsRequest {
    clientMetricsSchema: ClientMetricsSchema;
}

/**
 *
 */
export class ClientApi extends runtime.BaseAPI {

    /**
     */
    async getAllClientFeaturesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientFeaturesSchema>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/client/features`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientFeaturesSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getAllClientFeatures(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientFeaturesSchema> {
        const response = await this.getAllClientFeaturesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getClientFeatureRaw(requestParameters: GetClientFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientFeaturesSchema>> {
        if (requestParameters.featureName === null || requestParameters.featureName === undefined) {
            throw new runtime.RequiredError('featureName','Required parameter requestParameters.featureName was null or undefined when calling getClientFeature.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/client/features/{featureName}`.replace(`{${"featureName"}}`, encodeURIComponent(String(requestParameters.featureName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientFeaturesSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getClientFeature(requestParameters: GetClientFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientFeaturesSchema> {
        const response = await this.getClientFeatureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async registerClientApplicationRaw(requestParameters: RegisterClientApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.clientApplicationSchema === null || requestParameters.clientApplicationSchema === undefined) {
            throw new runtime.RequiredError('clientApplicationSchema','Required parameter requestParameters.clientApplicationSchema was null or undefined when calling registerClientApplication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/client/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClientApplicationSchemaToJSON(requestParameters.clientApplicationSchema),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async registerClientApplication(requestParameters: RegisterClientApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.registerClientApplicationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async registerClientMetricsRaw(requestParameters: RegisterClientMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.clientMetricsSchema === null || requestParameters.clientMetricsSchema === undefined) {
            throw new runtime.RequiredError('clientMetricsSchema','Required parameter requestParameters.clientMetricsSchema was null or undefined when calling registerClientMetrics.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/client/metrics`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClientMetricsSchemaToJSON(requestParameters.clientMetricsSchema),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async registerClientMetrics(requestParameters: RegisterClientMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.registerClientMetricsRaw(requestParameters, initOverrides);
    }

}
