/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.14.0-beta.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginSchema,
  TokenUserSchema,
  UserSchema,
} from '../models';
import {
    LoginSchemaFromJSON,
    LoginSchemaToJSON,
    TokenUserSchemaFromJSON,
    TokenUserSchemaToJSON,
    UserSchemaFromJSON,
    UserSchemaToJSON,
} from '../models';

export interface LoginRequest {
    loginSchema: LoginSchema;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     */
    async loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSchema>> {
        if (requestParameters.loginSchema === null || requestParameters.loginSchema === undefined) {
            throw new runtime.RequiredError('loginSchema','Required parameter requestParameters.loginSchema was null or undefined when calling login.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/auth/simple/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginSchemaToJSON(requestParameters.loginSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSchemaFromJSON(jsonValue));
    }

    /**
     */
    async login(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSchema> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async validateTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenUserSchema>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/auth/reset/validate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenUserSchemaFromJSON(jsonValue));
    }

    /**
     */
    async validateToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenUserSchema> {
        const response = await this.validateTokenRaw(initOverrides);
        return await response.value();
    }

}
