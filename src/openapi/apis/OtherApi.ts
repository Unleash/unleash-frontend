/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.14.0-beta.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BootstrapUiSchema,
  ChangePasswordSchema,
  EmailSchema,
  HealthCheckSchema,
  ValidatePasswordSchema,
} from '../models';
import {
    BootstrapUiSchemaFromJSON,
    BootstrapUiSchemaToJSON,
    ChangePasswordSchemaFromJSON,
    ChangePasswordSchemaToJSON,
    EmailSchemaFromJSON,
    EmailSchemaToJSON,
    HealthCheckSchemaFromJSON,
    HealthCheckSchemaToJSON,
    ValidatePasswordSchemaFromJSON,
    ValidatePasswordSchemaToJSON,
} from '../models';

export interface ChangePasswordRequest {
    changePasswordSchema: ChangePasswordSchema;
}

export interface SendResetPasswordEmailRequest {
    emailSchema: EmailSchema;
}

export interface ValidatePasswordRequest {
    validatePasswordSchema: ValidatePasswordSchema;
}

/**
 * 
 */
export class OtherApi extends runtime.BaseAPI {

    /**
     */
    async changePasswordRaw(requestParameters: ChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.changePasswordSchema === null || requestParameters.changePasswordSchema === undefined) {
            throw new runtime.RequiredError('changePasswordSchema','Required parameter requestParameters.changePasswordSchema was null or undefined when calling changePassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/auth/reset/password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangePasswordSchemaToJSON(requestParameters.changePasswordSchema),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async changePassword(requestParameters: ChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.changePasswordRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getBootstrapUiDataRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BootstrapUiSchema>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/ui-bootstrap`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BootstrapUiSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getBootstrapUiData(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BootstrapUiSchema> {
        const response = await this.getBootstrapUiDataRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getHealthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthCheckSchema>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthCheckSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getHealth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthCheckSchema> {
        const response = await this.getHealthRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async sendResetPasswordEmailRaw(requestParameters: SendResetPasswordEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.emailSchema === null || requestParameters.emailSchema === undefined) {
            throw new runtime.RequiredError('emailSchema','Required parameter requestParameters.emailSchema was null or undefined when calling sendResetPasswordEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/auth/reset/password-email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailSchemaToJSON(requestParameters.emailSchema),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sendResetPasswordEmail(requestParameters: SendResetPasswordEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sendResetPasswordEmailRaw(requestParameters, initOverrides);
    }

    /**
     */
    async validatePasswordRaw(requestParameters: ValidatePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.validatePasswordSchema === null || requestParameters.validatePasswordSchema === undefined) {
            throw new runtime.RequiredError('validatePasswordSchema','Required parameter requestParameters.validatePasswordSchema was null or undefined when calling validatePassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/auth/reset/validate-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ValidatePasswordSchemaToJSON(requestParameters.validatePasswordSchema),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async validatePassword(requestParameters: ValidatePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.validatePasswordRaw(requestParameters, initOverrides);
    }

}
