/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.14.0-beta.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GroupSchema } from './GroupSchema';
import {
    GroupSchemaFromJSON,
    GroupSchemaFromJSONTyped,
    GroupSchemaToJSON,
} from './GroupSchema';
import type { UserSchema } from './UserSchema';
import {
    UserSchemaFromJSON,
    UserSchemaFromJSONTyped,
    UserSchemaToJSON,
} from './UserSchema';

/**
 * 
 * @export
 * @interface UsersGroupsBaseSchema
 */
export interface UsersGroupsBaseSchema {
    /**
     * 
     * @type {Array<GroupSchema>}
     * @memberof UsersGroupsBaseSchema
     */
    groups?: Array<GroupSchema>;
    /**
     * 
     * @type {Array<UserSchema>}
     * @memberof UsersGroupsBaseSchema
     */
    users?: Array<UserSchema>;
}

/**
 * Check if a given object implements the UsersGroupsBaseSchema interface.
 */
export function instanceOfUsersGroupsBaseSchema(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UsersGroupsBaseSchemaFromJSON(json: any): UsersGroupsBaseSchema {
    return UsersGroupsBaseSchemaFromJSONTyped(json, false);
}

export function UsersGroupsBaseSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): UsersGroupsBaseSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'groups': !exists(json, 'groups') ? undefined : ((json['groups'] as Array<any>).map(GroupSchemaFromJSON)),
        'users': !exists(json, 'users') ? undefined : ((json['users'] as Array<any>).map(UserSchemaFromJSON)),
    };
}

export function UsersGroupsBaseSchemaToJSON(value?: UsersGroupsBaseSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'groups': value.groups === undefined ? undefined : ((value.groups as Array<any>).map(GroupSchemaToJSON)),
        'users': value.users === undefined ? undefined : ((value.users as Array<any>).map(UserSchemaToJSON)),
    };
}

