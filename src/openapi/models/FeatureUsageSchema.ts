/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.14.0-beta.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FeatureEnvironmentMetricsSchema } from './FeatureEnvironmentMetricsSchema';
import {
    FeatureEnvironmentMetricsSchemaFromJSON,
    FeatureEnvironmentMetricsSchemaFromJSONTyped,
    FeatureEnvironmentMetricsSchemaToJSON,
} from './FeatureEnvironmentMetricsSchema';

/**
 * 
 * @export
 * @interface FeatureUsageSchema
 */
export interface FeatureUsageSchema {
    /**
     * 
     * @type {number}
     * @memberof FeatureUsageSchema
     */
    version: number;
    /**
     * 
     * @type {string}
     * @memberof FeatureUsageSchema
     */
    maturity: string;
    /**
     * 
     * @type {string}
     * @memberof FeatureUsageSchema
     */
    featureName: string;
    /**
     * 
     * @type {Array<FeatureEnvironmentMetricsSchema>}
     * @memberof FeatureUsageSchema
     */
    lastHourUsage: Array<FeatureEnvironmentMetricsSchema>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FeatureUsageSchema
     */
    seenApplications: Array<string>;
}

/**
 * Check if a given object implements the FeatureUsageSchema interface.
 */
export function instanceOfFeatureUsageSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "maturity" in value;
    isInstance = isInstance && "featureName" in value;
    isInstance = isInstance && "lastHourUsage" in value;
    isInstance = isInstance && "seenApplications" in value;

    return isInstance;
}

export function FeatureUsageSchemaFromJSON(json: any): FeatureUsageSchema {
    return FeatureUsageSchemaFromJSONTyped(json, false);
}

export function FeatureUsageSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): FeatureUsageSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'version': json['version'],
        'maturity': json['maturity'],
        'featureName': json['featureName'],
        'lastHourUsage': ((json['lastHourUsage'] as Array<any>).map(FeatureEnvironmentMetricsSchemaFromJSON)),
        'seenApplications': json['seenApplications'],
    };
}

export function FeatureUsageSchemaToJSON(value?: FeatureUsageSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'version': value.version,
        'maturity': value.maturity,
        'featureName': value.featureName,
        'lastHourUsage': ((value.lastHourUsage as Array<any>).map(FeatureEnvironmentMetricsSchemaToJSON)),
        'seenApplications': value.seenApplications,
    };
}

