/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.14.0-beta.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ConstraintSchema } from './ConstraintSchema';
import {
    ConstraintSchemaFromJSON,
    ConstraintSchemaFromJSONTyped,
    ConstraintSchemaToJSON,
} from './ConstraintSchema';

/**
 *
 * @export
 * @interface FeatureEnvironmentSchemaStrategiesInner
 */
export interface FeatureEnvironmentSchemaStrategiesInner {
    /**
     *
     * @type {string}
     * @memberof FeatureEnvironmentSchemaStrategiesInner
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof FeatureEnvironmentSchemaStrategiesInner
     */
    featureName: string;
    /**
     *
     * @type {string}
     * @memberof FeatureEnvironmentSchemaStrategiesInner
     */
    projectId: string;
    /**
     *
     * @type {string}
     * @memberof FeatureEnvironmentSchemaStrategiesInner
     */
    environment: string;
    /**
     *
     * @type {string}
     * @memberof FeatureEnvironmentSchemaStrategiesInner
     */
    strategyName: string;
    /**
     *
     * @type {number}
     * @memberof FeatureEnvironmentSchemaStrategiesInner
     */
    sortOrder?: number;
    /**
     *
     * @type {Date}
     * @memberof FeatureEnvironmentSchemaStrategiesInner
     */
    createdAt?: Date;
    /**
     *
     * @type {Array<ConstraintSchema>}
     * @memberof FeatureEnvironmentSchemaStrategiesInner
     */
    constraints: Array<ConstraintSchema>;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof FeatureEnvironmentSchemaStrategiesInner
     */
    parameters: { [key: string]: string; };
}

/**
 * Check if a given object implements the FeatureEnvironmentSchemaStrategiesInner interface.
 */
export function instanceOfFeatureEnvironmentSchemaStrategiesInner(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "featureName" in value;
    isInstance = isInstance && "projectId" in value;
    isInstance = isInstance && "environment" in value;
    isInstance = isInstance && "strategyName" in value;
    isInstance = isInstance && "constraints" in value;
    isInstance = isInstance && "parameters" in value;

    return isInstance;
}

export function FeatureEnvironmentSchemaStrategiesInnerFromJSON(json: any): FeatureEnvironmentSchemaStrategiesInner {
    return FeatureEnvironmentSchemaStrategiesInnerFromJSONTyped(json, false);
}

export function FeatureEnvironmentSchemaStrategiesInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): FeatureEnvironmentSchemaStrategiesInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'id': json['id'],
        'featureName': json['featureName'],
        'projectId': json['projectId'],
        'environment': json['environment'],
        'strategyName': json['strategyName'],
        'sortOrder': !exists(json, 'sortOrder') ? undefined : json['sortOrder'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'constraints': ((json['constraints'] as Array<any>).map(ConstraintSchemaFromJSON)),
        'parameters': json['parameters'],
    };
}

export function FeatureEnvironmentSchemaStrategiesInnerToJSON(value?: FeatureEnvironmentSchemaStrategiesInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'id': value.id,
        'featureName': value.featureName,
        'projectId': value.projectId,
        'environment': value.environment,
        'strategyName': value.strategyName,
        'sortOrder': value.sortOrder,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'constraints': ((value.constraints as Array<any>).map(ConstraintSchemaToJSON)),
        'parameters': value.parameters,
    };
}

