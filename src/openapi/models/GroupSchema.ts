/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.14.0-beta.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GroupUserModelSchema } from './GroupUserModelSchema';
import {
    GroupUserModelSchemaFromJSON,
    GroupUserModelSchemaFromJSONTyped,
    GroupUserModelSchemaToJSON,
} from './GroupUserModelSchema';

/**
 * 
 * @export
 * @interface GroupSchema
 */
export interface GroupSchema {
    [key: string]: any | any;
    /**
     * 
     * @type {number}
     * @memberof GroupSchema
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof GroupSchema
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof GroupSchema
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupSchema
     */
    createdBy?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof GroupSchema
     */
    createdAt?: Date | null;
    /**
     * 
     * @type {Array<GroupUserModelSchema>}
     * @memberof GroupSchema
     */
    users?: Array<GroupUserModelSchema>;
    /**
     * 
     * @type {Array<string>}
     * @memberof GroupSchema
     */
    projects?: Array<string>;
}

/**
 * Check if a given object implements the GroupSchema interface.
 */
export function instanceOfGroupSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function GroupSchemaFromJSON(json: any): GroupSchema {
    return GroupSchemaFromJSONTyped(json, false);
}

export function GroupSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): GroupSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
            ...json,
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'createdBy': !exists(json, 'createdBy') ? undefined : json['createdBy'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (json['createdAt'] === null ? null : new Date(json['createdAt'])),
        'users': !exists(json, 'users') ? undefined : ((json['users'] as Array<any>).map(GroupUserModelSchemaFromJSON)),
        'projects': !exists(json, 'projects') ? undefined : json['projects'],
    };
}

export function GroupSchemaToJSON(value?: GroupSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
            ...value,
        'id': value.id,
        'name': value.name,
        'description': value.description,
        'createdBy': value.createdBy,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt === null ? null : value.createdAt.toISOString()),
        'users': value.users === undefined ? undefined : ((value.users as Array<any>).map(GroupUserModelSchemaToJSON)),
        'projects': value.projects,
    };
}

