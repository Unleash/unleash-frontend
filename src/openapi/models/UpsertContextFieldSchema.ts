/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.14.0-beta.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LegalValueSchema } from './LegalValueSchema';
import {
    LegalValueSchemaFromJSON,
    LegalValueSchemaFromJSONTyped,
    LegalValueSchemaToJSON,
} from './LegalValueSchema';

/**
 *
 * @export
 * @interface UpsertContextFieldSchema
 */
export interface UpsertContextFieldSchema {
    /**
     *
     * @type {string}
     * @memberof UpsertContextFieldSchema
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof UpsertContextFieldSchema
     */
    description?: string;
    /**
     *
     * @type {boolean}
     * @memberof UpsertContextFieldSchema
     */
    stickiness?: boolean;
    /**
     *
     * @type {number}
     * @memberof UpsertContextFieldSchema
     */
    sortOrder?: number;
    /**
     *
     * @type {Array<LegalValueSchema>}
     * @memberof UpsertContextFieldSchema
     */
    legalValues?: Array<LegalValueSchema>;
}

/**
 * Check if a given object implements the UpsertContextFieldSchema interface.
 */
export function instanceOfUpsertContextFieldSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function UpsertContextFieldSchemaFromJSON(json: any): UpsertContextFieldSchema {
    return UpsertContextFieldSchemaFromJSONTyped(json, false);
}

export function UpsertContextFieldSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpsertContextFieldSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'stickiness': !exists(json, 'stickiness') ? undefined : json['stickiness'],
        'sortOrder': !exists(json, 'sortOrder') ? undefined : json['sortOrder'],
        'legalValues': !exists(json, 'legalValues') ? undefined : ((json['legalValues'] as Array<any>).map(LegalValueSchemaFromJSON)),
    };
}

export function UpsertContextFieldSchemaToJSON(value?: UpsertContextFieldSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'name': value.name,
        'description': value.description,
        'stickiness': value.stickiness,
        'sortOrder': value.sortOrder,
        'legalValues': value.legalValues === undefined ? undefined : ((value.legalValues as Array<any>).map(LegalValueSchemaToJSON)),
    };
}

