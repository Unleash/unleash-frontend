/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.14.0-beta.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface EnvironmentSchema
 */
export interface EnvironmentSchema {
    /**
     * 
     * @type {string}
     * @memberof EnvironmentSchema
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof EnvironmentSchema
     */
    type: string;
    /**
     * 
     * @type {boolean}
     * @memberof EnvironmentSchema
     */
    enabled: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EnvironmentSchema
     */
    _protected?: boolean;
    /**
     * 
     * @type {number}
     * @memberof EnvironmentSchema
     */
    sortOrder?: number;
}

/**
 * Check if a given object implements the EnvironmentSchema interface.
 */
export function instanceOfEnvironmentSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "enabled" in value;

    return isInstance;
}

export function EnvironmentSchemaFromJSON(json: any): EnvironmentSchema {
    return EnvironmentSchemaFromJSONTyped(json, false);
}

export function EnvironmentSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): EnvironmentSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'type': json['type'],
        'enabled': json['enabled'],
        '_protected': !exists(json, 'protected') ? undefined : json['protected'],
        'sortOrder': !exists(json, 'sortOrder') ? undefined : json['sortOrder'],
    };
}

export function EnvironmentSchemaToJSON(value?: EnvironmentSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'type': value.type,
        'enabled': value.enabled,
        'protected': value._protected,
        'sortOrder': value.sortOrder,
    };
}

