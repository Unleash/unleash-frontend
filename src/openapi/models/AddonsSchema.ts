/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.14.0-beta.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AddonSchema } from './AddonSchema';
import {
    AddonSchemaFromJSON,
    AddonSchemaFromJSONTyped,
    AddonSchemaToJSON,
} from './AddonSchema';
import type { AddonTypeSchema } from './AddonTypeSchema';
import {
    AddonTypeSchemaFromJSON,
    AddonTypeSchemaFromJSONTyped,
    AddonTypeSchemaToJSON,
} from './AddonTypeSchema';

/**
 *
 * @export
 * @interface AddonsSchema
 */
export interface AddonsSchema {
    /**
     *
     * @type {Array<AddonSchema>}
     * @memberof AddonsSchema
     */
    addons: Array<AddonSchema>;
    /**
     *
     * @type {Array<AddonTypeSchema>}
     * @memberof AddonsSchema
     */
    providers: Array<AddonTypeSchema>;
}

/**
 * Check if a given object implements the AddonsSchema interface.
 */
export function instanceOfAddonsSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "addons" in value;
    isInstance = isInstance && "providers" in value;

    return isInstance;
}

export function AddonsSchemaFromJSON(json: any): AddonsSchema {
    return AddonsSchemaFromJSONTyped(json, false);
}

export function AddonsSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddonsSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'addons': ((json['addons'] as Array<any>).map(AddonSchemaFromJSON)),
        'providers': ((json['providers'] as Array<any>).map(AddonTypeSchemaFromJSON)),
    };
}

export function AddonsSchemaToJSON(value?: AddonsSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'addons': ((value.addons as Array<any>).map(AddonSchemaToJSON)),
        'providers': ((value.providers as Array<any>).map(AddonTypeSchemaToJSON)),
    };
}

