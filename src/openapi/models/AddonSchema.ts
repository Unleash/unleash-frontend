/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.14.0-beta.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AddonSchema
 */
export interface AddonSchema {
    /**
     * 
     * @type {number}
     * @memberof AddonSchema
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof AddonSchema
     */
    createdAt?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof AddonSchema
     */
    provider: string;
    /**
     * 
     * @type {string}
     * @memberof AddonSchema
     */
    description?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AddonSchema
     */
    enabled: boolean;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof AddonSchema
     */
    parameters: { [key: string]: any; };
    /**
     * 
     * @type {Array<string>}
     * @memberof AddonSchema
     */
    events: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AddonSchema
     */
    projects?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AddonSchema
     */
    environments?: Array<string>;
}

/**
 * Check if a given object implements the AddonSchema interface.
 */
export function instanceOfAddonSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "provider" in value;
    isInstance = isInstance && "enabled" in value;
    isInstance = isInstance && "parameters" in value;
    isInstance = isInstance && "events" in value;

    return isInstance;
}

export function AddonSchemaFromJSON(json: any): AddonSchema {
    return AddonSchemaFromJSONTyped(json, false);
}

export function AddonSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddonSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (json['createdAt'] === null ? null : new Date(json['createdAt'])),
        'provider': json['provider'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'enabled': json['enabled'],
        'parameters': json['parameters'],
        'events': json['events'],
        'projects': !exists(json, 'projects') ? undefined : json['projects'],
        'environments': !exists(json, 'environments') ? undefined : json['environments'],
    };
}

export function AddonSchemaToJSON(value?: AddonSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt === null ? null : value.createdAt.toISOString()),
        'provider': value.provider,
        'description': value.description,
        'enabled': value.enabled,
        'parameters': value.parameters,
        'events': value.events,
        'projects': value.projects,
        'environments': value.environments,
    };
}

