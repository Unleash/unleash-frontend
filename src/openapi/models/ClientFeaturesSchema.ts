/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.14.0-beta.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ClientFeatureSchema } from './ClientFeatureSchema';
import {
    ClientFeatureSchemaFromJSON,
    ClientFeatureSchemaFromJSONTyped,
    ClientFeatureSchemaToJSON,
} from './ClientFeatureSchema';
import type { ClientFeaturesQuerySchema } from './ClientFeaturesQuerySchema';
import {
    ClientFeaturesQuerySchemaFromJSON,
    ClientFeaturesQuerySchemaFromJSONTyped,
    ClientFeaturesQuerySchemaToJSON,
} from './ClientFeaturesQuerySchema';
import type { SegmentSchema } from './SegmentSchema';
import {
    SegmentSchemaFromJSON,
    SegmentSchemaFromJSONTyped,
    SegmentSchemaToJSON,
} from './SegmentSchema';

/**
 * 
 * @export
 * @interface ClientFeaturesSchema
 */
export interface ClientFeaturesSchema {
    /**
     * 
     * @type {number}
     * @memberof ClientFeaturesSchema
     */
    version: number;
    /**
     * 
     * @type {Array<ClientFeatureSchema>}
     * @memberof ClientFeaturesSchema
     */
    features: Array<ClientFeatureSchema>;
    /**
     * 
     * @type {Array<SegmentSchema>}
     * @memberof ClientFeaturesSchema
     */
    segments?: Array<SegmentSchema>;
    /**
     * 
     * @type {ClientFeaturesQuerySchema}
     * @memberof ClientFeaturesSchema
     */
    query?: ClientFeaturesQuerySchema;
}

/**
 * Check if a given object implements the ClientFeaturesSchema interface.
 */
export function instanceOfClientFeaturesSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "features" in value;

    return isInstance;
}

export function ClientFeaturesSchemaFromJSON(json: any): ClientFeaturesSchema {
    return ClientFeaturesSchemaFromJSONTyped(json, false);
}

export function ClientFeaturesSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClientFeaturesSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'version': json['version'],
        'features': ((json['features'] as Array<any>).map(ClientFeatureSchemaFromJSON)),
        'segments': !exists(json, 'segments') ? undefined : ((json['segments'] as Array<any>).map(SegmentSchemaFromJSON)),
        'query': !exists(json, 'query') ? undefined : ClientFeaturesQuerySchemaFromJSON(json['query']),
    };
}

export function ClientFeaturesSchemaToJSON(value?: ClientFeaturesSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'version': value.version,
        'features': ((value.features as Array<any>).map(ClientFeatureSchemaToJSON)),
        'segments': value.segments === undefined ? undefined : ((value.segments as Array<any>).map(SegmentSchemaToJSON)),
        'query': ClientFeaturesQuerySchemaToJSON(value.query),
    };
}

