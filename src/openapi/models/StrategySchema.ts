/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.14.0-beta.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { StrategySchemaParametersInner } from './StrategySchemaParametersInner';
import {
    StrategySchemaParametersInnerFromJSON,
    StrategySchemaParametersInnerFromJSONTyped,
    StrategySchemaParametersInnerToJSON,
} from './StrategySchemaParametersInner';

/**
 * 
 * @export
 * @interface StrategySchema
 */
export interface StrategySchema {
    /**
     * 
     * @type {string}
     * @memberof StrategySchema
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof StrategySchema
     */
    displayName: string | null;
    /**
     * 
     * @type {string}
     * @memberof StrategySchema
     */
    description: string;
    /**
     * 
     * @type {boolean}
     * @memberof StrategySchema
     */
    editable: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StrategySchema
     */
    deprecated: boolean;
    /**
     * 
     * @type {Array<StrategySchemaParametersInner>}
     * @memberof StrategySchema
     */
    parameters: Array<StrategySchemaParametersInner>;
}

/**
 * Check if a given object implements the StrategySchema interface.
 */
export function instanceOfStrategySchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "displayName" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "editable" in value;
    isInstance = isInstance && "deprecated" in value;
    isInstance = isInstance && "parameters" in value;

    return isInstance;
}

export function StrategySchemaFromJSON(json: any): StrategySchema {
    return StrategySchemaFromJSONTyped(json, false);
}

export function StrategySchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): StrategySchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'displayName': json['displayName'],
        'description': json['description'],
        'editable': json['editable'],
        'deprecated': json['deprecated'],
        'parameters': ((json['parameters'] as Array<any>).map(StrategySchemaParametersInnerFromJSON)),
    };
}

export function StrategySchemaToJSON(value?: StrategySchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'displayName': value.displayName,
        'description': value.description,
        'editable': value.editable,
        'deprecated': value.deprecated,
        'parameters': ((value.parameters as Array<any>).map(StrategySchemaParametersInnerToJSON)),
    };
}

