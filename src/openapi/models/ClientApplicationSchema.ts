/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.14.0-beta.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ClientApplicationSchemaStarted } from './ClientApplicationSchemaStarted';
import {
    ClientApplicationSchemaStartedFromJSON,
    ClientApplicationSchemaStartedFromJSONTyped,
    ClientApplicationSchemaStartedToJSON,
} from './ClientApplicationSchemaStarted';

/**
 *
 * @export
 * @interface ClientApplicationSchema
 */
export interface ClientApplicationSchema {
    /**
     *
     * @type {string}
     * @memberof ClientApplicationSchema
     */
    appName: string;
    /**
     *
     * @type {string}
     * @memberof ClientApplicationSchema
     */
    instanceId?: string;
    /**
     *
     * @type {string}
     * @memberof ClientApplicationSchema
     */
    sdkVersion?: string;
    /**
     *
     * @type {string}
     * @memberof ClientApplicationSchema
     */
    environment?: string;
    /**
     *
     * @type {number}
     * @memberof ClientApplicationSchema
     */
    interval: number;
    /**
     *
     * @type {ClientApplicationSchemaStarted}
     * @memberof ClientApplicationSchema
     */
    started: ClientApplicationSchemaStarted;
    /**
     *
     * @type {Array<string>}
     * @memberof ClientApplicationSchema
     */
    strategies: Array<string>;
}

/**
 * Check if a given object implements the ClientApplicationSchema interface.
 */
export function instanceOfClientApplicationSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "appName" in value;
    isInstance = isInstance && "interval" in value;
    isInstance = isInstance && "started" in value;
    isInstance = isInstance && "strategies" in value;

    return isInstance;
}

export function ClientApplicationSchemaFromJSON(json: any): ClientApplicationSchema {
    return ClientApplicationSchemaFromJSONTyped(json, false);
}

export function ClientApplicationSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClientApplicationSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'appName': json['appName'],
        'instanceId': !exists(json, 'instanceId') ? undefined : json['instanceId'],
        'sdkVersion': !exists(json, 'sdkVersion') ? undefined : json['sdkVersion'],
        'environment': !exists(json, 'environment') ? undefined : json['environment'],
        'interval': json['interval'],
        'started': ClientApplicationSchemaStartedFromJSON(json['started']),
        'strategies': json['strategies'],
    };
}

export function ClientApplicationSchemaToJSON(value?: ClientApplicationSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'appName': value.appName,
        'instanceId': value.instanceId,
        'sdkVersion': value.sdkVersion,
        'environment': value.environment,
        'interval': value.interval,
        'started': ClientApplicationSchemaStartedToJSON(value.started),
        'strategies': value.strategies,
    };
}

