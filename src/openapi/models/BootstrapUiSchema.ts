/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.14.0-beta.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BootstrapUiSchemaUser } from './BootstrapUiSchemaUser';
import {
    BootstrapUiSchemaUserFromJSON,
    BootstrapUiSchemaUserFromJSONTyped,
    BootstrapUiSchemaUserToJSON,
} from './BootstrapUiSchemaUser';
import type { ContextFieldSchema } from './ContextFieldSchema';
import {
    ContextFieldSchemaFromJSON,
    ContextFieldSchemaFromJSONTyped,
    ContextFieldSchemaToJSON,
} from './ContextFieldSchema';
import type { FeatureTypeSchema } from './FeatureTypeSchema';
import {
    FeatureTypeSchemaFromJSON,
    FeatureTypeSchemaFromJSONTyped,
    FeatureTypeSchemaToJSON,
} from './FeatureTypeSchema';
import type { ProjectSchema } from './ProjectSchema';
import {
    ProjectSchemaFromJSON,
    ProjectSchemaFromJSONTyped,
    ProjectSchemaToJSON,
} from './ProjectSchema';
import type { StrategySchema } from './StrategySchema';
import {
    StrategySchemaFromJSON,
    StrategySchemaFromJSONTyped,
    StrategySchemaToJSON,
} from './StrategySchema';
import type { TagTypeSchema } from './TagTypeSchema';
import {
    TagTypeSchemaFromJSON,
    TagTypeSchemaFromJSONTyped,
    TagTypeSchemaToJSON,
} from './TagTypeSchema';
import type { UiConfigSchema } from './UiConfigSchema';
import {
    UiConfigSchemaFromJSON,
    UiConfigSchemaFromJSONTyped,
    UiConfigSchemaToJSON,
} from './UiConfigSchema';

/**
 *
 * @export
 * @interface BootstrapUiSchema
 */
export interface BootstrapUiSchema {
    /**
     *
     * @type {UiConfigSchema}
     * @memberof BootstrapUiSchema
     */
    uiConfig: UiConfigSchema;
    /**
     *
     * @type {BootstrapUiSchemaUser}
     * @memberof BootstrapUiSchema
     */
    user: BootstrapUiSchemaUser;
    /**
     *
     * @type {boolean}
     * @memberof BootstrapUiSchema
     */
    email: boolean;
    /**
     *
     * @type {Array<ContextFieldSchema>}
     * @memberof BootstrapUiSchema
     */
    context: Array<ContextFieldSchema>;
    /**
     *
     * @type {Array<FeatureTypeSchema>}
     * @memberof BootstrapUiSchema
     */
    featureTypes: Array<FeatureTypeSchema>;
    /**
     *
     * @type {Array<TagTypeSchema>}
     * @memberof BootstrapUiSchema
     */
    tagTypes: Array<TagTypeSchema>;
    /**
     *
     * @type {Array<StrategySchema>}
     * @memberof BootstrapUiSchema
     */
    strategies: Array<StrategySchema>;
    /**
     *
     * @type {Array<ProjectSchema>}
     * @memberof BootstrapUiSchema
     */
    projects: Array<ProjectSchema>;
}

/**
 * Check if a given object implements the BootstrapUiSchema interface.
 */
export function instanceOfBootstrapUiSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "uiConfig" in value;
    isInstance = isInstance && "user" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "context" in value;
    isInstance = isInstance && "featureTypes" in value;
    isInstance = isInstance && "tagTypes" in value;
    isInstance = isInstance && "strategies" in value;
    isInstance = isInstance && "projects" in value;

    return isInstance;
}

export function BootstrapUiSchemaFromJSON(json: any): BootstrapUiSchema {
    return BootstrapUiSchemaFromJSONTyped(json, false);
}

export function BootstrapUiSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): BootstrapUiSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'uiConfig': UiConfigSchemaFromJSON(json['uiConfig']),
        'user': BootstrapUiSchemaUserFromJSON(json['user']),
        'email': json['email'],
        'context': ((json['context'] as Array<any>).map(ContextFieldSchemaFromJSON)),
        'featureTypes': ((json['featureTypes'] as Array<any>).map(FeatureTypeSchemaFromJSON)),
        'tagTypes': ((json['tagTypes'] as Array<any>).map(TagTypeSchemaFromJSON)),
        'strategies': ((json['strategies'] as Array<any>).map(StrategySchemaFromJSON)),
        'projects': ((json['projects'] as Array<any>).map(ProjectSchemaFromJSON)),
    };
}

export function BootstrapUiSchemaToJSON(value?: BootstrapUiSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'uiConfig': UiConfigSchemaToJSON(value.uiConfig),
        'user': BootstrapUiSchemaUserToJSON(value.user),
        'email': value.email,
        'context': ((value.context as Array<any>).map(ContextFieldSchemaToJSON)),
        'featureTypes': ((value.featureTypes as Array<any>).map(FeatureTypeSchemaToJSON)),
        'tagTypes': ((value.tagTypes as Array<any>).map(TagTypeSchemaToJSON)),
        'strategies': ((value.strategies as Array<any>).map(StrategySchemaToJSON)),
        'projects': ((value.projects as Array<any>).map(ProjectSchemaToJSON)),
    };
}

