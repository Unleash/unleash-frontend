/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.14.0-beta.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EnvironmentSchema } from './EnvironmentSchema';
import {
    EnvironmentSchemaFromJSON,
    EnvironmentSchemaFromJSONTyped,
    EnvironmentSchemaToJSON,
} from './EnvironmentSchema';

/**
 * 
 * @export
 * @interface EnvironmentsSchema
 */
export interface EnvironmentsSchema {
    /**
     * 
     * @type {number}
     * @memberof EnvironmentsSchema
     */
    version: number;
    /**
     * 
     * @type {Array<EnvironmentSchema>}
     * @memberof EnvironmentsSchema
     */
    environments: Array<EnvironmentSchema>;
}

/**
 * Check if a given object implements the EnvironmentsSchema interface.
 */
export function instanceOfEnvironmentsSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "environments" in value;

    return isInstance;
}

export function EnvironmentsSchemaFromJSON(json: any): EnvironmentsSchema {
    return EnvironmentsSchemaFromJSONTyped(json, false);
}

export function EnvironmentsSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): EnvironmentsSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'version': json['version'],
        'environments': ((json['environments'] as Array<any>).map(EnvironmentSchemaFromJSON)),
    };
}

export function EnvironmentsSchemaToJSON(value?: EnvironmentsSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'version': value.version,
        'environments': ((value.environments as Array<any>).map(EnvironmentSchemaToJSON)),
    };
}

