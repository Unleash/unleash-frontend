/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.14.0-beta.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FeedbackSchema } from './FeedbackSchema';
import {
    FeedbackSchemaFromJSON,
    FeedbackSchemaFromJSONTyped,
    FeedbackSchemaToJSON,
} from './FeedbackSchema';
import type { PermissionSchema } from './PermissionSchema';
import {
    PermissionSchemaFromJSON,
    PermissionSchemaFromJSONTyped,
    PermissionSchemaToJSON,
} from './PermissionSchema';
import type { UserSchema } from './UserSchema';
import {
    UserSchemaFromJSON,
    UserSchemaFromJSONTyped,
    UserSchemaToJSON,
} from './UserSchema';

/**
 *
 * @export
 * @interface MeSchema
 */
export interface MeSchema {
    /**
     *
     * @type {UserSchema}
     * @memberof MeSchema
     */
    user: UserSchema;
    /**
     *
     * @type {Array<PermissionSchema>}
     * @memberof MeSchema
     */
    permissions: Array<PermissionSchema>;
    /**
     *
     * @type {Array<FeedbackSchema>}
     * @memberof MeSchema
     */
    feedback: Array<FeedbackSchema>;
    /**
     *
     * @type {{ [key: string]: boolean; }}
     * @memberof MeSchema
     */
    splash: { [key: string]: boolean; };
}

/**
 * Check if a given object implements the MeSchema interface.
 */
export function instanceOfMeSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "user" in value;
    isInstance = isInstance && "permissions" in value;
    isInstance = isInstance && "feedback" in value;
    isInstance = isInstance && "splash" in value;

    return isInstance;
}

export function MeSchemaFromJSON(json: any): MeSchema {
    return MeSchemaFromJSONTyped(json, false);
}

export function MeSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): MeSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'user': UserSchemaFromJSON(json['user']),
        'permissions': ((json['permissions'] as Array<any>).map(PermissionSchemaFromJSON)),
        'feedback': ((json['feedback'] as Array<any>).map(FeedbackSchemaFromJSON)),
        'splash': json['splash'],
    };
}

export function MeSchemaToJSON(value?: MeSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'user': UserSchemaToJSON(value.user),
        'permissions': ((value.permissions as Array<any>).map(PermissionSchemaToJSON)),
        'feedback': ((value.feedback as Array<any>).map(FeedbackSchemaToJSON)),
        'splash': value.splash,
    };
}

