/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.14.0-beta.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface ClientMetricsSchemaBucketTogglesValue
 */
export interface ClientMetricsSchemaBucketTogglesValue {
    /**
     *
     * @type {number}
     * @memberof ClientMetricsSchemaBucketTogglesValue
     */
    yes?: number;
    /**
     *
     * @type {number}
     * @memberof ClientMetricsSchemaBucketTogglesValue
     */
    no?: number;
    /**
     *
     * @type {{ [key: string]: number; }}
     * @memberof ClientMetricsSchemaBucketTogglesValue
     */
    variants?: { [key: string]: number; };
}

/**
 * Check if a given object implements the ClientMetricsSchemaBucketTogglesValue interface.
 */
export function instanceOfClientMetricsSchemaBucketTogglesValue(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ClientMetricsSchemaBucketTogglesValueFromJSON(json: any): ClientMetricsSchemaBucketTogglesValue {
    return ClientMetricsSchemaBucketTogglesValueFromJSONTyped(json, false);
}

export function ClientMetricsSchemaBucketTogglesValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClientMetricsSchemaBucketTogglesValue {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'yes': !exists(json, 'yes') ? undefined : json['yes'],
        'no': !exists(json, 'no') ? undefined : json['no'],
        'variants': !exists(json, 'variants') ? undefined : json['variants'],
    };
}

export function ClientMetricsSchemaBucketTogglesValueToJSON(value?: ClientMetricsSchemaBucketTogglesValue | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'yes': value.yes,
        'no': value.no,
        'variants': value.variants,
    };
}

