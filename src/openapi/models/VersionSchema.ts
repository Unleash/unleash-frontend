/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.14.0-beta.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { VersionSchemaCurrent } from './VersionSchemaCurrent';
import {
    VersionSchemaCurrentFromJSON,
    VersionSchemaCurrentFromJSONTyped,
    VersionSchemaCurrentToJSON,
} from './VersionSchemaCurrent';

/**
 * 
 * @export
 * @interface VersionSchema
 */
export interface VersionSchema {
    /**
     * 
     * @type {VersionSchemaCurrent}
     * @memberof VersionSchema
     */
    current: VersionSchemaCurrent;
    /**
     * 
     * @type {VersionSchemaCurrent}
     * @memberof VersionSchema
     */
    latest: VersionSchemaCurrent;
    /**
     * 
     * @type {boolean}
     * @memberof VersionSchema
     */
    isLatest: boolean;
    /**
     * 
     * @type {string}
     * @memberof VersionSchema
     */
    instanceId: string;
}

/**
 * Check if a given object implements the VersionSchema interface.
 */
export function instanceOfVersionSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "current" in value;
    isInstance = isInstance && "latest" in value;
    isInstance = isInstance && "isLatest" in value;
    isInstance = isInstance && "instanceId" in value;

    return isInstance;
}

export function VersionSchemaFromJSON(json: any): VersionSchema {
    return VersionSchemaFromJSONTyped(json, false);
}

export function VersionSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): VersionSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'current': VersionSchemaCurrentFromJSON(json['current']),
        'latest': VersionSchemaCurrentFromJSON(json['latest']),
        'isLatest': json['isLatest'],
        'instanceId': json['instanceId'],
    };
}

export function VersionSchemaToJSON(value?: VersionSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'current': VersionSchemaCurrentToJSON(value.current),
        'latest': VersionSchemaCurrentToJSON(value.latest),
        'isLatest': value.isLatest,
        'instanceId': value.instanceId,
    };
}

