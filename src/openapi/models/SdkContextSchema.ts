/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.14.0-beta.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * The Unleash context as modeled in client SDKs
 * @export
 * @interface SdkContextSchema
 */
export interface SdkContextSchema {
    [key: string]: string | any;
    /**
     * 
     * @type {string}
     * @memberof SdkContextSchema
     */
    appName: string;
    /**
     * 
     * @type {Date}
     * @memberof SdkContextSchema
     */
    currentTime?: Date;
    /**
     * 
     * @type {string}
     * @memberof SdkContextSchema
     * @deprecated
     */
    environment?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof SdkContextSchema
     */
    properties?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof SdkContextSchema
     */
    remoteAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof SdkContextSchema
     */
    sessionId?: string;
    /**
     * 
     * @type {string}
     * @memberof SdkContextSchema
     */
    userId?: string;
}

/**
 * Check if a given object implements the SdkContextSchema interface.
 */
export function instanceOfSdkContextSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "appName" in value;

    return isInstance;
}

export function SdkContextSchemaFromJSON(json: any): SdkContextSchema {
    return SdkContextSchemaFromJSONTyped(json, false);
}

export function SdkContextSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): SdkContextSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
            ...json,
        'appName': json['appName'],
        'currentTime': !exists(json, 'currentTime') ? undefined : (new Date(json['currentTime'])),
        'environment': !exists(json, 'environment') ? undefined : json['environment'],
        'properties': !exists(json, 'properties') ? undefined : json['properties'],
        'remoteAddress': !exists(json, 'remoteAddress') ? undefined : json['remoteAddress'],
        'sessionId': !exists(json, 'sessionId') ? undefined : json['sessionId'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
    };
}

export function SdkContextSchemaToJSON(value?: SdkContextSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
            ...value,
        'appName': value.appName,
        'currentTime': value.currentTime === undefined ? undefined : (value.currentTime.toISOString()),
        'environment': value.environment,
        'properties': value.properties,
        'remoteAddress': value.remoteAddress,
        'sessionId': value.sessionId,
        'userId': value.userId,
    };
}

