/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.14.0-beta.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EnvironmentSchema } from './EnvironmentSchema';
import {
    EnvironmentSchemaFromJSON,
    EnvironmentSchemaFromJSONTyped,
    EnvironmentSchemaToJSON,
} from './EnvironmentSchema';
import type { FeatureEnvironmentSchema } from './FeatureEnvironmentSchema';
import {
    FeatureEnvironmentSchemaFromJSON,
    FeatureEnvironmentSchemaFromJSONTyped,
    FeatureEnvironmentSchemaToJSON,
} from './FeatureEnvironmentSchema';
import type { FeatureSchema } from './FeatureSchema';
import {
    FeatureSchemaFromJSON,
    FeatureSchemaFromJSONTyped,
    FeatureSchemaToJSON,
} from './FeatureSchema';
import type { FeatureStrategySchema } from './FeatureStrategySchema';
import {
    FeatureStrategySchemaFromJSON,
    FeatureStrategySchemaFromJSONTyped,
    FeatureStrategySchemaToJSON,
} from './FeatureStrategySchema';
import type { FeatureStrategySegmentSchema } from './FeatureStrategySegmentSchema';
import {
    FeatureStrategySegmentSchemaFromJSON,
    FeatureStrategySegmentSchemaFromJSONTyped,
    FeatureStrategySegmentSchemaToJSON,
} from './FeatureStrategySegmentSchema';
import type { FeatureTagSchema } from './FeatureTagSchema';
import {
    FeatureTagSchemaFromJSON,
    FeatureTagSchemaFromJSONTyped,
    FeatureTagSchemaToJSON,
} from './FeatureTagSchema';
import type { ProjectSchema } from './ProjectSchema';
import {
    ProjectSchemaFromJSON,
    ProjectSchemaFromJSONTyped,
    ProjectSchemaToJSON,
} from './ProjectSchema';
import type { SegmentSchema } from './SegmentSchema';
import {
    SegmentSchemaFromJSON,
    SegmentSchemaFromJSONTyped,
    SegmentSchemaToJSON,
} from './SegmentSchema';
import type { StrategySchema } from './StrategySchema';
import {
    StrategySchemaFromJSON,
    StrategySchemaFromJSONTyped,
    StrategySchemaToJSON,
} from './StrategySchema';
import type { TagSchema } from './TagSchema';
import {
    TagSchemaFromJSON,
    TagSchemaFromJSONTyped,
    TagSchemaToJSON,
} from './TagSchema';
import type { TagTypeSchema } from './TagTypeSchema';
import {
    TagTypeSchemaFromJSON,
    TagTypeSchemaFromJSONTyped,
    TagTypeSchemaToJSON,
} from './TagTypeSchema';

/**
 * 
 * @export
 * @interface StateSchema
 */
export interface StateSchema {
    [key: string]: any | any;
    /**
     * 
     * @type {number}
     * @memberof StateSchema
     */
    version: number;
    /**
     * 
     * @type {Array<FeatureSchema>}
     * @memberof StateSchema
     */
    features?: Array<FeatureSchema>;
    /**
     * 
     * @type {Array<StrategySchema>}
     * @memberof StateSchema
     */
    strategies?: Array<StrategySchema>;
    /**
     * 
     * @type {Array<TagSchema>}
     * @memberof StateSchema
     */
    tags?: Array<TagSchema>;
    /**
     * 
     * @type {Array<TagTypeSchema>}
     * @memberof StateSchema
     */
    tagTypes?: Array<TagTypeSchema>;
    /**
     * 
     * @type {Array<FeatureTagSchema>}
     * @memberof StateSchema
     */
    featureTags?: Array<FeatureTagSchema>;
    /**
     * 
     * @type {Array<ProjectSchema>}
     * @memberof StateSchema
     */
    projects?: Array<ProjectSchema>;
    /**
     * 
     * @type {Array<FeatureStrategySchema>}
     * @memberof StateSchema
     */
    featureStrategies?: Array<FeatureStrategySchema>;
    /**
     * 
     * @type {Array<FeatureEnvironmentSchema>}
     * @memberof StateSchema
     */
    featureEnvironments?: Array<FeatureEnvironmentSchema>;
    /**
     * 
     * @type {Array<EnvironmentSchema>}
     * @memberof StateSchema
     */
    environments?: Array<EnvironmentSchema>;
    /**
     * 
     * @type {Array<SegmentSchema>}
     * @memberof StateSchema
     */
    segments?: Array<SegmentSchema>;
    /**
     * 
     * @type {Array<FeatureStrategySegmentSchema>}
     * @memberof StateSchema
     */
    featureStrategySegments?: Array<FeatureStrategySegmentSchema>;
}

/**
 * Check if a given object implements the StateSchema interface.
 */
export function instanceOfStateSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "version" in value;

    return isInstance;
}

export function StateSchemaFromJSON(json: any): StateSchema {
    return StateSchemaFromJSONTyped(json, false);
}

export function StateSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): StateSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
            ...json,
        'version': json['version'],
        'features': !exists(json, 'features') ? undefined : ((json['features'] as Array<any>).map(FeatureSchemaFromJSON)),
        'strategies': !exists(json, 'strategies') ? undefined : ((json['strategies'] as Array<any>).map(StrategySchemaFromJSON)),
        'tags': !exists(json, 'tags') ? undefined : ((json['tags'] as Array<any>).map(TagSchemaFromJSON)),
        'tagTypes': !exists(json, 'tagTypes') ? undefined : ((json['tagTypes'] as Array<any>).map(TagTypeSchemaFromJSON)),
        'featureTags': !exists(json, 'featureTags') ? undefined : ((json['featureTags'] as Array<any>).map(FeatureTagSchemaFromJSON)),
        'projects': !exists(json, 'projects') ? undefined : ((json['projects'] as Array<any>).map(ProjectSchemaFromJSON)),
        'featureStrategies': !exists(json, 'featureStrategies') ? undefined : ((json['featureStrategies'] as Array<any>).map(FeatureStrategySchemaFromJSON)),
        'featureEnvironments': !exists(json, 'featureEnvironments') ? undefined : ((json['featureEnvironments'] as Array<any>).map(FeatureEnvironmentSchemaFromJSON)),
        'environments': !exists(json, 'environments') ? undefined : ((json['environments'] as Array<any>).map(EnvironmentSchemaFromJSON)),
        'segments': !exists(json, 'segments') ? undefined : ((json['segments'] as Array<any>).map(SegmentSchemaFromJSON)),
        'featureStrategySegments': !exists(json, 'featureStrategySegments') ? undefined : ((json['featureStrategySegments'] as Array<any>).map(FeatureStrategySegmentSchemaFromJSON)),
    };
}

export function StateSchemaToJSON(value?: StateSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
            ...value,
        'version': value.version,
        'features': value.features === undefined ? undefined : ((value.features as Array<any>).map(FeatureSchemaToJSON)),
        'strategies': value.strategies === undefined ? undefined : ((value.strategies as Array<any>).map(StrategySchemaToJSON)),
        'tags': value.tags === undefined ? undefined : ((value.tags as Array<any>).map(TagSchemaToJSON)),
        'tagTypes': value.tagTypes === undefined ? undefined : ((value.tagTypes as Array<any>).map(TagTypeSchemaToJSON)),
        'featureTags': value.featureTags === undefined ? undefined : ((value.featureTags as Array<any>).map(FeatureTagSchemaToJSON)),
        'projects': value.projects === undefined ? undefined : ((value.projects as Array<any>).map(ProjectSchemaToJSON)),
        'featureStrategies': value.featureStrategies === undefined ? undefined : ((value.featureStrategies as Array<any>).map(FeatureStrategySchemaToJSON)),
        'featureEnvironments': value.featureEnvironments === undefined ? undefined : ((value.featureEnvironments as Array<any>).map(FeatureEnvironmentSchemaToJSON)),
        'environments': value.environments === undefined ? undefined : ((value.environments as Array<any>).map(EnvironmentSchemaToJSON)),
        'segments': value.segments === undefined ? undefined : ((value.segments as Array<any>).map(SegmentSchemaToJSON)),
        'featureStrategySegments': value.featureStrategySegments === undefined ? undefined : ((value.featureStrategySegments as Array<any>).map(FeatureStrategySegmentSchemaToJSON)),
    };
}

